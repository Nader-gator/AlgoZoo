# Generated by Django 2.2.1 on 2019-10-04 01:58

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('coderunner', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='test',
            name='file_name',
            field=models.CharField(choices=[(0, 'path_sum.py'), (1, 'sorted_lists_merge.py'), (2, 'tree_right_sibling.py'), (3, 'minimum_waiting_time.py'), (4, 'run_length_compression.py'), (5, 'collatz_checker.py'), (6, 'defective_jugs.py'), (7, 'snake_string.py'), (8, 'lru_cache.py'), (9, 'is_circuit_wirable.py'), (10, 'tree_with_parent_inorder.py'), (11, 'longest_substring_with_matching_parentheses.py'), (12, 'max_product_all_but_one.py'), (13, 'successor_in_tree.py'), (14, 'string_decompositions_into_dictionary_words.py'), (15, 'advance_by_offsets.py'), (16, 'is_string_decomposable_into_words.py'), (17, 'directory_path_normalization.py'), (18, 'real_square_root.py'), (19, 'search_in_list.py'), (20, 'max_water_trappable.py'), (21, 'sort_list.py'), (22, 'maximum_subarray_in_circular_array.py'), (23, 'element_appearing_once.py'), (24, 'phone_number_mnemonic.py'), (25, 'is_valid_sudoku.py'), (26, 'find_salary_threshold.py'), (27, 'reverse_digits.py'), (28, 'tree_preorder.py'), (29, 'hanoi.py'), (30, 'enumerate_balanced_parentheses.py'), (31, 'pretty_printing.py'), (32, 'online_sampling.py'), (33, 'binary_tree_with_parent_prototype.py'), (34, 'power_set.py'), (35, 'posting_list_node.py'), (36, 'sum_root_to_leaf.py'), (37, 'is_tree_a_bst.py'), (38, 'number_of_traversals_matrix.py'), (39, 'reverse_words.py'), (40, 'intervals_union.py'), (41, 'max_of_sliding_window.py'), (42, 'anagrams.py'), (43, 'lowest_common_ancestor_with_parent.py'), (44, 'smallest_subarray_covering_set.py'), (45, 'bst_node.py'), (46, 'k_largest_in_heap.py'), (47, 'parity.py'), (48, 'graph_clone.py'), (49, 'minimum_points_covering_intervals.py'), (50, 'do_terminated_lists_overlap.py'), (51, 'reverse_bits.py'), (52, 'line_through_most_points.py'), (53, 'search_for_min_max_in_array.py'), (54, 'insert_in_list.py'), (55, 'kth_largest_element_in_two_sorted_arrays.py'), (56, 'left_right_justify_text.py'), (57, 'gcd.py'), (58, 'picking_up_coins.py'), (59, 'max_sum_subarray.py'), (60, 'is_string_in_matrix.py'), (61, 'bst_from_preorder.py'), (62, 'next_permutation.py'), (63, 'tree_exterior.py'), (64, 'enumerate_palindromic_decompositions.py'), (65, 'knapsack.py'), (66, 'tree_from_preorder_with_null.py'), (67, 'search_for_missing_element.py'), (68, 'search_maze.py'), (69, 'largest_rectangle_under_skyline.py'), (70, 'road_network.py'), (71, 'majority_element.py'), (72, 'power_x_y.py'), (73, 'string_integer_interconversion.py'), (74, 'gray_code.py'), (75, 'queue_with_max.py'), (76, 'max_square_submatrix.py'), (77, 'search_row_col_sorted_matrix.py'), (78, 'arbitrage.py'), (79, 'insert_operators_in_string.py'), (80, '__init__.py'), (81, 'search_frequent_items.py'), (82, 'sunset_view.py'), (83, 'smallest_nonconstructible_value.py'), (84, 'permutations.py'), (85, 'intersect_sorted_arrays.py'), (86, 'rook_attack.py'), (87, 'even_odd_array.py'), (88, 'int_square_root.py'), (89, '__pycache__'), (90, 'binomial_coefficients.py'), (91, 'spiral_ordering_segments.py'), (92, 'h_index.py'), (93, 'k_largest_values_in_bst.py'), (94, 'delete_kth_last_from_list.py'), (95, 'pascal_triangle.py'), (96, 'even_odd_list_merge.py'), (97, 'spreadsheet_encoding.py'), (98, 'apply_permutation.py'), (99, 'lowest_common_ancestor_in_bst.py'), (100, 'list_node.py'), (101, 'count_inversions.py'), (102, 'closest_int_same_weight.py'), (103, 'convert_base.py'), (104, 'regular_expression.py'), (105, 'two_sorted_arrays_merge.py'), (106, 'max_trapped_water.py'), (107, 'lowest_common_ancestor_close_ancestor.py'), (108, 'drawing_skyline.py'), (109, 'replace_and_remove.py'), (110, 'is_valid_parenthesization.py'), (111, 'first_missing_positive_entry.py'), (112, 'roman_to_integer.py'), (113, 'search_shifted_sorted_array.py'), (114, 'absent_value_array.py'), (115, 'remove_duplicates_from_sorted_list.py'), (116, 'tree_from_preorder_inorder.py'), (117, 'string_transformability.py'), (118, 'is_tree_balanced.py'), (119, 'sort_increasing_decreasing_array.py'), (120, 'max_teams_in_photograph.py'), (121, 'max_submatrix.py'), (122, 'longest_increasing_subarray.py'), (123, 'is_array_dominated.py'), (124, 'matrix_enclosed_regions.py'), (125, 'sudoku_solve.py'), (126, 'doubly_list_node.py'), (127, 'nonuniform_random_number.py'), (128, 'tree_level_order.py'), (129, 'task_pairing.py'), (130, 'longest_contained_interval.py'), (131, 'calendar_rendering.py'), (132, 'smallest_subarray_covering_all_values.py'), (133, 'search_unknown_length_array.py'), (134, 'is_string_permutable_to_palindrome.py'), (135, 'bst_from_sorted_array.py'), (136, 'is_string_palindromic_punctuation.py'), (137, 'sort_almost_sorted_array.py'), (138, 'list_cyclic_right_shift.py'), (139, 'random_subset.py'), (140, 'circular_queue.py'), (141, 'look_and_say.py'), (142, 'primitive_divide.py'), (143, 'substring_match.py'), (144, 'valid_ip_addresses.py'), (145, 'uniform_random_number.py'), (146, 'three_sum.py'), (147, 'sorted_array_remove_dups.py'), (148, 'buy_and_sell_stock.py'), (149, 'levenshtein_distance.py'), (150, 'longest_subarray_with_sum_constraint.py'), (151, 'longest_nondecreasing_subsequence.py'), (152, 'binary_tree_node.py'), (153, 'rotate_array.py'), (154, 'is_list_palindromic.py'), (155, 'k_closest_stars.py'), (156, 'reverse_sublist.py'), (157, 'sorted_arrays_merge.py'), (158, 'buy_and_sell_stock_twice.py'), (159, 'prime_sieve.py'), (160, 'evaluate_rpn.py'), (161, 'is_anonymous_letter_constructible.py'), (162, 'descendant_and_ancestor_in_bst.py'), (163, 'adding_credits.py'), (164, 'bonus.py'), (165, 'int_as_array_multiply.py'), (166, 'lowest_common_ancestor.py'), (167, 'swap_bits.py'), (168, 'search_entry_equal_to_index.py'), (169, 'dutch_national_flag.py'), (170, 'random_permutation.py'), (171, 'minimum_weight_path_in_a_triangle.py'), (172, 'number_of_traversals_staircase.py'), (173, 'int_as_array_increment.py'), (174, 'range_lookup_in_bst.py'), (175, 'search_first_key.py'), (176, 'n_queens.py'), (177, 'deadlock_detection.py'), (178, 'kth_node_in_tree.py'), (179, 'tree_inorder.py'), (180, 'copy_posting_list.py'), (181, 'group_equal_entries.py'), (182, 'bst_merge.py'), (183, 'offline_sampling.py'), (184, 'bst_to_sorted_list.py'), (185, 'minimum_distance_3_sorted_arrays.py'), (186, 'search_first_greater_value_in_bst.py'), (187, 'longest_subarray_with_distinct_values.py'), (188, 'is_tree_symmetric.py'), (189, 'delete_from_list.py'), (190, 'int_as_list_add.py'), (191, 'delete_node_from_list.py'), (192, 'kth_largest_in_array.py'), (193, 'primitive_multiply.py'), (194, 'matrix_connected_regions.py'), (195, 'is_list_cyclic.py'), (196, 'tree_connect_leaves.py'), (197, 'matrix_rotation.py'), (198, 'is_number_palindromic.py'), (199, 'huffman_coding.py'), (200, 'nearest_repeated_entries.py'), (201, 'enumerate_trees.py'), (202, 'sorted_list_to_bst.py'), (203, 'number_of_score_combinations.py'), (204, 'combinations.py'), (205, 'interval_add.py'), (206, 'zip_list.py'), (207, 'tree_postorder.py'), (208, 'a_b_sqrt2.py'), (209, 'stack_with_max.py'), (210, 'fibonacci.py'), (211, 'two_sum.py'), (212, 'alternating_array.py'), (213, 'online_median.py'), (214, 'rectangle_intersection.py'), (215, 'max_safe_height.py'), (216, 'do_lists_overlap.py'), (217, 'kth_largest_element_in_long_array.py'), (218, 'remove_duplicates.py'), (219, 'refueling_schedule.py'), (220, 'pivot_list.py'), (221, 'queue_from_stacks.py'), (222, 'count_bits.py'), (223, 'buy_and_sell_stock_k_times.py')], default=(0, 'path_sum.py'), max_length=100),
        ),
    ]
